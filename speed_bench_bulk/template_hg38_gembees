#!/bin/bash
#SBATCH --job-name gemb_QQQ
#SBATCH -o slurm/gemb_QQQ.log
#SBATCH --ntasks=30
#SBATCH --mem=512000
#SBATCH --time=1-00:00:00

set -euo pipefail

IS_TRUSEQ=false

WORKDIR=/path/to/working/directory

# Useful paths
DIRLOC=${WORKDIR}/align
REFLOC=${WORKDIR}/refs/gembs
FASTQS=${WORKDIR}/trim
TOOLS=/path/to/installed_packages

# TOOLS
GEMBEES=${TOOLS}/gemBS_rs_git # gemBS version 4.0.4
SAMTOOL=${TOOLS}/samtools_packages_v1.17/make_install_files/bin
BEDTOOL=${TOOLS}/bedtools_2.30.0/bin
TIMEDIR=${TOOLS}/time-1.9

# FILES
FST=${REFLOC}/../truseq_methyl_capture_epic_manifest_hg38.bed
FQ1=QQQ_val_1.fq.gz
FQ2=QQQ_val_2.fq.gz
OUT=${DIRLOC}/gemb_QQQ
MEM=gemb_QQQ.track_mem.txt
RAM=gemb_QQQ.track_ram.txt
CON=${DIRLOC}/config_gembs_hg38.conf
TEM=${DIRLOC}/config_gembs_sample.template
SAP=${OUT}/config_gembs_QQQ.conf
NAM=QQQ
TIM=gemb_QQQ.gnu_time.tsv
BAM=gemb_QQQ.bam
BCF=gemb_QQQ.bcf
NRD=gemb_QQQ.read_counts.txt
ONN=gemb_QQQ.on_target.read_names.txt.gz
OFF=gemb_QQQ.off_target.read_names.txt.gz

# Use the same number of threads throughout
NTHREADS=30

# Use the same sleep time throughout
SLEEP_TIME=10

# Create analysis directory if it doesn't exist
mkdir -p ${OUT}

# Change to analysis directory
cd ${OUT}

# Setup sample config file
sed "s/111/${FQ1}/g; s/222/${FQ2}/g; s/NOM/${NAM}/g" ${TEM} > ${SAP}

# Track disk usage in the background
nohup bash ${DIRLOC}/track_memory.sh ${OUT} ${SLEEP_TIME} > ${MEM} 2>&1 &
nohup bash ${DIRLOC}/track_ram.sh ${SLEEP_TIME} > ${RAM} 2>&1 &
pgrep -P $$

# /usr/bin/time format string
# part\tuser\tsystem\telapsed\tCPU\ttext\tdata\tmax\tinputs\toutputs\tmajor\tminor\tswaps

( ${TIMEDIR}/time \
    --format="prepare\t%U\t%S\t%e\t%P\t%X\t%D\t%M\t%I\t%O\t%F\t%R\t%W" \
    --output=${TIM} \
    ${GEMBEES}/gemBS prepare -c ${CON} -t ${SAP}
)

( ${TIMEDIR}/time \
    --format="align\t%U\t%S\t%e\t%P\t%X\t%D\t%M\t%I\t%O\t%F\t%R\t%W" \
    --output=${TIM} \
    --append \
    ${GEMBEES}/gemBS map --tmp-dir ${OUT}
)

( ${TIMEDIR}/time \
    --format="call\t%U\t%S\t%e\t%P\t%X\t%D\t%M\t%I\t%O\t%F\t%R\t%W" \
    --output=${TIM} \
    --append \
    ${GEMBEES}/gemBS call --tmp-dir ${OUT}
)

( ${TIMEDIR}/time \
    --format="extract\t%U\t%S\t%e\t%P\t%X\t%D\t%M\t%I\t%O\t%F\t%R\t%W" \
    --output=${TIM} \
    --append \
    ${GEMBEES}/gemBS extract
)

sleep ${SLEEP_TIME}

# Stop tracking memory
pkill -P $$

# Count the number of reads in the BAM
echo -e "total_reads\t`${SAMTOOL}/samtools view -F 2304 ${BAM} | cut -f 1 | sort -k1 -T ${OUT} | uniq | wc -l`" > ${NRD}
echo -e "mapped_reads\t`${SAMTOOL}/samtools view -F 2308 ${BAM} | cut -f 1 | sort -k1 -T ${OUT} | uniq | wc -l`" >> ${NRD}
echo -e "good_mapped_reads\t`${SAMTOOL}/samtools view -F 2308 -q 40 ${BAM} | cut -f 1 | sort -k1 -T ${OUT} | uniq | wc -l`" >> ${NRD}

# Find on-/off-target reads for TruSeq methyl capture datasets
if [ "${IS_TRUSEQ}" = true ]; then
    # Find on target reads (these reads fall in the good_mapped_reads category)
    ${SAMTOOL}/samtools view -hbu -F 2308 -q 40 ${BAM} | \
    ${BEDTOOL}/bedtools intersect -wa -a stdin -b ${FST} | \
    ${SAMTOOL}/samtools view | \
    cut -f 1 | \
    sort -k1 -T ${OUT} | \
    uniq | \
    gzip \
    > ${ONN}

    # Find off target reads (these reads fall in the good_mapped_reads category)
    ${SAMTOOL}/samtools view -hbu -F 2308 -q 40 ${BAM} | \
    ${BEDTOOL}/bedtools intersect -v -wa -a stdin -b ${FST} | \
    ${SAMTOOL}/samtools view | \
    cut -f 1 | \
    sort -k1 -T ${OUT} | \
    uniq | \
    gzip \
    > ${OFF}
fi

rm ${BAM} ${BCF} *.csi
rm *_chh.*
rm *_chg.*
rm *.md5 *.bw *.json *.bb
rm *_cpg.txt.gz*
